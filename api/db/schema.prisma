// https://www.prisma.io/docs/guides/development-environment/environment-variables#example-set-the-database_url-environment-variable-in-an-env-file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // On n'utilise pas PostGIS, parce que la liaison Supabase / Prisma / PostGIS implique d'autres extensions qui
  // compliquent trop l'usage de postgis. Alternative : https://alizahid.dev/blog/geo-queries-with-prisma
  // extensions = [postgis(version: "2.1")]
}

generator client {
  provider        = "prisma-client-js"
  //Multischema : https://github.com/prisma/prisma/issues/1175#issuecomment-1336491410
  //"postgresqlExtensions" Extensions : https://www.prisma.io/docs/concepts/components/prisma-schema/postgresql-extensions#how-to-enable-the-postgresqlextensions-preview-feature
  previewFeatures = ["multiSchema"]
  binaryTargets   = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model User {
  id   Int     @id @default(autoincrement())
  cuid String  @unique @default(cuid())
  idv1 String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eppn  String? @unique
  email String  @unique
  roles String  @default("user") //user | admin

  image     String?
  name      String?
  surname   String?
  phone     String?
  showEmail Boolean? @default(false)
  showPhone Boolean? @default(false)

  job               String?
  department        String?
  shortPresentation String?
  presentation      String?
  subjects          String?

  organization   Organization @relation("OrganizationBelonging", fields: [organizationId], references: [id])
  organizationId Int

  organizationsAuthored Organization[] @relation("OrganizationAuthoring")
  networkAuthored       Network[]      @relation("NetworkAuthoring")
  initiativesAuthored   Initiative[]   @relation("InitiativeAuthoring")
  initiativesMembered   Initiative[]   @relation("InitiativeUsers")

  practices Practice[] @relation("UserPractices")

  instance   Instance? @relation("UsersFromInstance", fields: [instanceId], references: [id])
  instanceId Int?
}

model Organization {
  id        Int      @id @default(autoincrement())
  cuid      String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation("OrganizationAuthoring", fields: [authorId], references: [id])
  authorId  Int?
  users     User[]   @relation("OrganizationBelonging")
  name      String   @unique
  address   String?
  url       String?
  logo      String? //Logo de l'Ã©tablissement

  instance   Instance? @relation("OrganizationsFromInstance", fields: [instanceId], references: [id])
  instanceId Int?

  initiatives Initiative[] @relation("InitiativeOrganizations")

  latitude  Float?
  longitude Float?
}

model Practice {
  id               Int          @id @default(autoincrement())
  cuid             String       @unique @default(cuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  name             String
  synonym          String[]
  description      String?
  shortDescription String?
  sources          String[]
  users            User[]       @relation("UserPractices")
  initiatives      Initiative[] @relation("InitiativePractices")

  instance   Instance? @relation("PracticesFromInstance", fields: [instanceId], references: [id])
  instanceId Int?
}

model Instance {
  id   Int    @id @default(autoincrement())
  host String @unique

  version String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]         @relation("UsersFromInstance")
  organizations Organization[] @relation("OrganizationsFromInstance")
  practices     Practice[]     @relation("PracticesFromInstance")
}

model Initiative {
  id   Int     @id @default(autoincrement())
  cuid String  @unique @default(cuid())
  idv1 String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image        String?
  title        String?
  outsideUsers String?
  contact      String?

  descriptionMD     String?
  conditionsMD      String?
  evaluationMD      String?
  strengthsMD       String?
  transferabilityMD String?

  tags        Tag[]
  subjects    Subject[]
  levels      Level[]
  resources   Resource[]
  competences Competence[]
  networks    Network[]
  sponsors    Sponsor[]

  users         User[]         @relation("InitiativeUsers")
  organizations Organization[] @relation("InitiativeOrganizations")

  author   User @relation("InitiativeAuthoring", fields: [authorId], references: [id])
  authorId Int

  practices Practice[] @relation("InitiativePractices")
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String
  initiatives Initiative[]
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String
  initiatives Initiative[]
}

model Level {
  id          Int          @id @default(autoincrement())
  name        String
  initiatives Initiative[]
}

model Sponsor {
  id          Int          @id @default(autoincrement())
  name        String
  url         String?
  logo        String?
  initiatives Initiative[]
}

model Resource {
  id          Int          @id @default(autoincrement())
  name        String
  url         String?
  filename    String?
  description String?
  initiatives Initiative[]
}

model Competence {
  id          Int            @id @default(autoincrement())
  name        String
  url         String?
  type        TypeCompetence
  initiatives Initiative[]
}

model Network {
  id          Int          @id @default(autoincrement())
  name        String
  url         String?
  logo        String?
  author      User?        @relation("NetworkAuthoring", fields: [authorId], references: [id])
  authorId    Int?
  initiatives Initiative[]
}

enum Metier {
  TEACHER
  SUPPORT
}

enum TypeCompetence {
  DISCIPLINARY
  TRANSVERSAL
}
